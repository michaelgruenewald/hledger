# Runs on any push to ci-mac, and weekly on master.
# Produces optimised mac binaries and runs unit/doc/functional tests,
# using the default stack.yaml's GHC version.

name: binaries-mac-x64

on:
  schedule:
  - cron: "0 07 * * 0"  # sunday midnight pacific
  push:
    branches: [ ci-mac, binaries ]
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        plan:
        # - { ghc: "86"    , stack: "stack --stack-yaml=stack8.6.yaml" }
        # - { ghc: "88"  , stack: "stack --stack-yaml=stack8.8.yaml" }
        # - { ghc: "810" , stack: "stack --stack-yaml=stack8.10.yaml" }
        # XXX func tests in bin should be run only with GHC 8.10 for now (see shelltest below) (?)
        # - { ghc: "90" , stack: "stack --stack-yaml=stack9.0.yaml" }
        - { ghc: "92" , stack: "stack --stack-yaml=stack.yaml" }

    steps:

    - name: Check out
      uses: actions/checkout@v2
      # have to fetch everything for git describe for --version
      with: 
        fetch-depth: 0        

    - name: Confirm all remaining steps should run
      run: echo "CONTINUE=true" >> $GITHUB_ENV

    # things to be cached/restored:

    - name: Cache stack global package db
      id:   stack-global
      uses: actions/cache@v2
      with:
        path: ~/.stack
        key: ${{ runner.os }}-stack-global-after20220817-${{ hashFiles('**.yaml') }}
        restore-keys: |
             ${{ runner.os }}-stack-global-after20220817
      if: env.CONTINUE

    - name: Cache stack-installed programs in ~/.local/bin
      id:   stack-programs
      uses: actions/cache@v2
      with:
        path: ~/.local/bin
        key: ${{ runner.os }}-stack-programs-${{ hashFiles('**.yaml') }}
        restore-keys: |
             ${{ runner.os }}-stack-programs
      if: env.CONTINUE

    - name: Cache .stack-work
      uses: actions/cache@v2
      with:
        path: .stack-work
        key: ${{ runner.os }}-stack-work-${{ hashFiles('**.yaml') }}
        restore-keys: |
             ${{ runner.os }}-stack-work
      if: env.CONTINUE

    - name: Cache hledger-lib/.stack-work
      uses: actions/cache@v2
      with:
        path: hledger-lib/.stack-work
        key: ${{ runner.os }}-hledger-lib-stack-work-${{ hashFiles('hledger-lib/package.yaml') }}
        restore-keys: |
             ${{ runner.os }}-hledger-lib-stack-work
      if: env.CONTINUE

    - name: Cache hledger/.stack-work
      uses: actions/cache@v2
      with:
        path: hledger/.stack-work
        key: ${{ runner.os }}-hledger-stack-work-${{ hashFiles('hledger/package.yaml') }}
        restore-keys: |
             ${{ runner.os }}-hledger-stack-work
      if: env.CONTINUE

    - name: Cache hledger-ui/.stack-work
      uses: actions/cache@v2
      with:
        path: hledger-ui/.stack-work
        key: ${{ runner.os }}-hledger-ui-stack-work-${{ hashFiles('hledger-ui/package.yaml') }}
        restore-keys: |
             ${{ runner.os }}-hledger-ui-stack-work
      if: env.CONTINUE

    - name: Cache hledger-web/.stack-work
      uses: actions/cache@v2
      with:
        path: hledger-web/.stack-work
        key: ${{ runner.os }}-hledger-web-stack-work-${{ hashFiles('hledger-web/package.yaml') }}
        restore-keys: |
             ${{ runner.os }}-hledger-web-stack-work
      if: env.CONTINUE

    # actions:

    - name: Install stack
      # run: |
      #   brew install haskell-stack
      #   $stack --version
      run: |
        mkdir -p ~/.local/bin
        export PATH=~/.local/bin:$PATH        
        # brew install gnu-tar; curl -sL https://get.haskellstack.org/stable/osx-x86_64.tar.gz | gtar xz --wildcards --strip-components=1 -C ~/.local/bin '*/stack'; chmod a+x ~/.local/bin/stack
        if [[ ! -x ~/.local/bin/stack ]]; then brew install gnu-tar; curl -sL https://get.haskellstack.org/stable/osx-x86_64.tar.gz | gtar xz --wildcards --strip-components=1 -C ~/.local/bin '*/stack'; chmod a+x ~/.local/bin/stack; fi
        stack --version
      if: env.CONTINUE

    - name: Install GHC
      env:
        stack: ${{ matrix.plan.stack }}
      run: |
        $stack setup --install-ghc
      if: env.CONTINUE

    - name: Install haskell deps
      env:
        stack: ${{ matrix.plan.stack }}
      run: |
        $stack build --test --only-dependencies --dry-run
        $stack build --test --only-dependencies
      if: env.CONTINUE

    - name: Build hledger and test unit tests, doc tests
      env:
        stack: ${{ matrix.plan.stack }}
      run: |
        $stack install --test --force-dirty --ghc-options=-fforce-recomp --ghc-options=-Werror
        # --ghc-options=-split-sections doesn't work on mac
        #  --pedantic
      if: env.CONTINUE

    - name: Install shelltestrunner
      env:
        stack: ${{ matrix.plan.stack }}
      run: |
        export PATH=~/.local/bin:$PATH
        if [[ ! -x ~/.local/bin/shelltest ]]; then $stack install shelltestrunner-1.9; fi
        shelltest --version
      if: env.CONTINUE

    - name: Test functional tests (excluding addons)
      env:
        stack: ${{ matrix.plan.stack }}
      run: |
        export PATH=~/.local/bin:$PATH
        COLUMNS=80 $stack exec -- shelltest --execdir -j16 hledger/test -x /_ -x /addons # bin
      if: env.CONTINUE

    # artifacts:

    - name: Gather binaries
      run: |
        mkdir tmp
        cd tmp
        cp ~/.local/bin/hledger .
        cp ~/.local/bin/hledger-ui .
        cp ~/.local/bin/hledger-web .
        strip hledger
        strip hledger-ui
        strip hledger-web
        tar cvf hledger-mac-x64.tar hledger hledger-ui hledger-web
      if: env.CONTINUE

    # upload-artifact loses execute permissions, so we tar the binaries to preserve them.
    # github UI always zips artifacts when they are downloaded, so we don't bother compressing the tar.
    # Unfortunately it means users must both unzip and untar.
    - name: Upload binaries artifact
      uses: actions/upload-artifact@v3
      with:
        name: hledger-mac-x64
        path: tmp/hledger-mac-x64.tar
      if: env.CONTINUE

